/*
 * This file was generated by the Gradle 'init' task.
 */
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id("jlox.java-application-conventions")
    id("java")
}

repositories { mavenCentral() }

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    implementation("org.apache.commons:commons-text")
}

application {
    // Define the main class for the application.
    mainClass.set("jlox.interpreter.Main")
}

tasks {
    val fatJar =
            register<Jar>("fatJar") {
                dependsOn.addAll(listOf("compileJava", "processResources"))
                archiveClassifier.set("standalone")
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                manifest { attributes(mapOf("Main-Class" to application.mainClass)) }
                val sourcesMain = sourceSets.main.get()
                val contents =
                        configurations.runtimeClasspath.get().map {
                            if (it.isDirectory) it else zipTree(it)
                        } + sourcesMain.output
                from(contents)
            }
    build { dependsOn(fatJar) }
    test {
        useJUnitPlatform()

        testLogging{
            lifecycle {
                events = mutableSetOf(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED)
                exceptionFormat = TestExceptionFormat.FULL
                showExceptions = true
                showCauses = true
                showStackTraces = true
                showStandardStreams = true
            }
            info.events = lifecycle.events
            info.exceptionFormat = lifecycle.exceptionFormat
        }
        val failedTests = mutableSetOf<TestDescriptor>()
        val skippedTests = mutableSetOf<TestDescriptor>()

        addTestListener(object : TestListener {
            override fun beforeSuite(suite: TestDescriptor) {}
            override fun beforeTest(testDescriptor: TestDescriptor) {
                logger.lifecycle("-------------------------------------------------")
            }
            override fun afterTest(testDescriptor: TestDescriptor, result: TestResult){
                when(result.resultType) {
                    TestResult.ResultType.FAILURE -> failedTests.add(testDescriptor)
                    TestResult.ResultType.SKIPPED -> failedTests.add(testDescriptor)
                    else -> Unit
                }
            }

            override fun afterSuite(suite: TestDescriptor, result: TestResult) {
                if(suite.parent == null) {
                    logger.lifecycle("-------------------------------------------------")
                    logger.lifecycle("Test result: ${result.resultType}")
                    logger.lifecycle(
                        "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped")
                }
            }
            private fun TestDescriptor.displayName() = parent?.let { "${it.name} - $name"} ?: "$name"
        })



    }
}
